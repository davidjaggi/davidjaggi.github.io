{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My Website \u00b6 Some more content will be added soon.","title":"Home"},{"location":"#my-website","text":"Some more content will be added soon.","title":"My Website"},{"location":"about/","text":"About me \u00b6 Hi, my name is David. I am a PhD student at the University of Zurich and a research associate at the Zurich University of Applied Sciences. My research interests are in the intersection of machine learning, alternative data and finance.","title":"About"},{"location":"about/#about-me","text":"Hi, my name is David. I am a PhD student at the University of Zurich and a research associate at the Zurich University of Applied Sciences. My research interests are in the intersection of machine learning, alternative data and finance.","title":"About me"},{"location":"blog/","text":"Blogs \u00b6 {{ blog_content }}","title":"Blog"},{"location":"blog/#blogs","text":"{{ blog_content }}","title":"Blogs"},{"location":"blog/extract-data-directly-from-multicharts/","text":"The following code extracts data directly from MultiCharts. Create an indicator and insert the following code: Inputs: iPrint(False), iFileName(\"C:\\Users\\Administrator\\5min.txt\"), iPrecision(4); Variables: dateInDateTimeFormat(0), timeInDateTimeFormat(0), dateReadable(\"\"), timeReadable(\"\"); Once begin Print(File(iFileName),\"Date,Time,Open,High,Low,Close,Vol,OI\" ); end ; dateInDateTimeFormat = ElDateToDateTime(Date); timeInDateTimeFormat = eltimetodatetime(Time); dateReadable = FormatDate(\"MM/dd/yyyy\",dateInDateTimeFormat); timeReadable = FormatTime(\"HH:mm\",timeInDateTimeFormat); if iPrint = True then Print(File(iFileName),dateReadable + \",\" + timeReadable + \",\" + NumToStr(O,iPrecision) + \",\"+ NumToStr(H,iPrecision)+\",\"+NumToStr(L,iPrecision)+\",\"+NumToStr(C,iPrecision)+\",\"+ NumToStr(Volume,0)+\",\"+NumToStr(OpenInt,0)); Adjust the iFilename and set it to the correct path where you want to store the txt-file. iPrecision lets you decide how many decimal places the exported file should contain. The headings are \u201cDate,Time,Open,High,Low,Close,Vol,OI\u201d which are specially set in order to import the file into BuildAlpha. After inserting the indicator into MC set the bar time correctly and set the input iPrint to true. The file should only take a few seconds to be generated.","title":"Extract data directly from multicharts"},{"location":"blog/my-research-workflow/","text":"I want to present my research workflow, which I currently use for my projects. The whole workflow is still a work in progress and is likely to change over time. If you have any inputs, please reach out to me. The tools I use is a collection of tools for thought and serve different purposes. I like to keep everything in Markdown, so I have full control over my work. Task Management \u00b6 The task management is done partially in Amazing Marvin and on the other side in Obsidian. In Amazing Marvin I create a dedicated project. This helps me to track deadlines and schedule the tasks in my day. Amazing Marvin also lets me create time blockers in my calendar and is synced with my Google Calendar. Obsidian is mainly used here for long term planning. I mainly use the Kanban board with the following categories. Backlog Next In progress Blocked Done Delegated Testing The nice thing about this setup is that each task can have a dedicated markdown page with additional information. Obsidian also lets me reference them, so it is easy to incorporate and refer to the content of a task at a later stage of the project. Project Documentation \u00b6 I document my projects in Obsidian, where I have a folder for each project. I like to have a dedicated folder for each project to easily archive projects once they are finished. The folder structure follows the structure shown below. Project Name - Description - Paper/ - Drafts (Longform) - Data/ - Reference/ - Meetings/ - Roadmap/ - Roadmap Items/ Knowledge \u00b6 I like to keep the general knowledge separate from my projects. My Zettelkasten lives in Logseq. Here I follow the Evergreen Note framework. For all notes which are not original thoughts, I create a keyword tag. Hence, all notes linked to Python like deleting columns in a data frame, would get the #keyword tag. Workflows that also live in Logseq get the #runbook tag. An example for this would be: \"How to set up a python environment\". Code \u00b6 To store my code, I use GitHub. It allows for easy collaboration and simple versioning. It is also the most commonly used tool; hence there is a lot of information around when it comes to troubleshooting any issues. As an IDE, I mainly use VSCode with the Devcontainers and Docker to have a dedicated environment for each project. References \u00b6 For reference management, I use Zotero, which is connected to Research Rabbit. I also use Zotfile and BetterBibtex as add-ons to my Zotero. Writing \u00b6 I have a dedicated Paper folder for the drafting phase that uses the Longform plugin in Obsidian. All of the initial information flow into this folder, and the initial draft is written in Markdown. For the final version, we use LaTeX via Overleaf. It is easy to collaborate in and works without any local setup. I hope this little overview helped. In the future, I plan to revisit this page and refine my workflow with additional information.","title":"My research workflow"},{"location":"blog/my-research-workflow/#task-management","text":"The task management is done partially in Amazing Marvin and on the other side in Obsidian. In Amazing Marvin I create a dedicated project. This helps me to track deadlines and schedule the tasks in my day. Amazing Marvin also lets me create time blockers in my calendar and is synced with my Google Calendar. Obsidian is mainly used here for long term planning. I mainly use the Kanban board with the following categories. Backlog Next In progress Blocked Done Delegated Testing The nice thing about this setup is that each task can have a dedicated markdown page with additional information. Obsidian also lets me reference them, so it is easy to incorporate and refer to the content of a task at a later stage of the project.","title":"Task Management"},{"location":"blog/my-research-workflow/#project-documentation","text":"I document my projects in Obsidian, where I have a folder for each project. I like to have a dedicated folder for each project to easily archive projects once they are finished. The folder structure follows the structure shown below. Project Name - Description - Paper/ - Drafts (Longform) - Data/ - Reference/ - Meetings/ - Roadmap/ - Roadmap Items/","title":"Project Documentation"},{"location":"blog/my-research-workflow/#knowledge","text":"I like to keep the general knowledge separate from my projects. My Zettelkasten lives in Logseq. Here I follow the Evergreen Note framework. For all notes which are not original thoughts, I create a keyword tag. Hence, all notes linked to Python like deleting columns in a data frame, would get the #keyword tag. Workflows that also live in Logseq get the #runbook tag. An example for this would be: \"How to set up a python environment\".","title":"Knowledge"},{"location":"blog/my-research-workflow/#code","text":"To store my code, I use GitHub. It allows for easy collaboration and simple versioning. It is also the most commonly used tool; hence there is a lot of information around when it comes to troubleshooting any issues. As an IDE, I mainly use VSCode with the Devcontainers and Docker to have a dedicated environment for each project.","title":"Code"},{"location":"blog/my-research-workflow/#references","text":"For reference management, I use Zotero, which is connected to Research Rabbit. I also use Zotfile and BetterBibtex as add-ons to my Zotero.","title":"References"},{"location":"blog/my-research-workflow/#writing","text":"I have a dedicated Paper folder for the drafting phase that uses the Longform plugin in Obsidian. All of the initial information flow into this folder, and the initial draft is written in Markdown. For the final version, we use LaTeX via Overleaf. It is easy to collaborate in and works without any local setup. I hope this little overview helped. In the future, I plan to revisit this page and refine my workflow with additional information.","title":"Writing"}]}